#from time import sleep
import asyncio
from asyncio import sleep
from aiogram.types import ParseMode
import aiogram
import sqlite3
from aiogram import Bot, Dispatcher, types
import random
from aiogram import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
#from aiogram import ParseMode, ReplyKeyboardMarkup, KeyboardButton
import logging
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

storage= MemoryStorage()
bot = Bot(token="")
dp = Dispatcher(bot, storage=storage)
connect = sqlite3.connect('bd')             #—Å–æ–∑–¥–∞–Ω–∏–µ –±–¥
c = connect.cursor()
#c.execute('CREATE TABLE users ( id INTEGER PRIMARY KEY, duh integer, friends integer, status integer, inventory integer, strength integer, speed integer, reaction integer, energy integer, travel integer, predel integer, money integer)')
#c.execute('CREATE TABLE sklad ( id INTEGER PRIMARY KEY, name text, quantity integer)')
#c.execute('CREATE TABLE items (id_item integer PRIMARY KEY, name text, description text, class text, bonus integer)')
#my_list = ['menu_kb()', 'citi_kb()', 'movies_kb()', 'friend_kb()', 'setting_kb()']


list = []
class Statess(StatesGroup):
    noduh= State()
    wait = State()
    do = State()
    menu= State()
    battle= State()
    chatt= State()

def menu_kb():

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ì–æ—Ä–æ–¥'), KeyboardButton('–î–µ–π—Å—Ç–≤–∏—è'), KeyboardButton('–î—Ä—É–∑—å—è')).add(KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏'), KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å'))
    return kb
def citi_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–†–µ–π—Ç–∏–Ω–≥'), KeyboardButton('–ò–≤–µ–Ω—Ç—ã'), KeyboardButton('–ö—É–∑–Ω—è')).add(KeyboardButton('–¢–æ—Ä–≥–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª'), KeyboardButton('–ß–∞—Ç'), (KeyboardButton('–†–∞–±–æ—Ç–∞'))).add(KeyboardButton('–ù–∞–∑–∞–¥'))
    return kb
def movies_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ'), KeyboardButton('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'), KeyboardButton('–ü–æ–≥–ª–æ—à–µ–Ω–∏–µ –µ–Ω–µ—Ä–≥–∏–∏')).add(KeyboardButton('–ù–∞–∑–∞–¥'))
    return kb
def friend_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(''), KeyboardButton(''), KeyboardButton('')).add(KeyboardButton(''), KeyboardButton('')).add(
        KeyboardButton('–ù–∞–∑–∞–¥'))
    return kb
def setting_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(''), KeyboardButton(''), KeyboardButton('')).add(KeyboardButton(''), KeyboardButton('')).add(
        KeyboardButton('–ù–∞–∑–∞–¥'))
    return kb
def dange_kb():
    kb=ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(''), KeyboardButton('')).add(KeyboardButton('–ù–∞–∑–∞–¥'))
    return kb
def fid(fid):
    connect = sqlite3.connect('bd')
    c = connect.cursor()
    c.execute(f'UPDATE users SET predel = strength+ speed+ reaction WHERE id = {fid}')
    connect.commit()
    c.execute(f'SELECT * FROM users WHERE id = {fid}')
    return c.fetchall()
startt = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
startt.add(KeyboardButton('/help'), KeyboardButton('Faq')).add(KeyboardButton('/menu'))


@dp.message_handler(Text(equals='–ù–∞–∑–∞–¥'), state='*')
async def menu(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        dat=data['last']
    if str(await state.get_state())=='Statess:wait':
        async with state.proxy() as data:
            data['last'] = 'menu_kb()'
        await Statess.menu.set()
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=movies_kb())
    elif dat=='menu_kb()':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=menu_kb())
    elif dat=='citi_kb()':
        async with state.proxy() as data:
            data['last'] = 'menu_kb()'
        await Statess.menu.set()
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=citi_kb())
    elif dat=='movies_kb()':
        async with state.proxy() as data:
            data['last'] = 'menu_kb()'
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=movies_kb())
    elif dat=='friend_kb()':
        async with state.proxy() as data:
            data['last'] = 'menu_kb()'
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=friend_kb())
    elif dat=='setting_kb()':
        async with state.proxy() as data:
            data['last'] = 'menu_kb()'
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=setting_kb())


@dp.message_handler( state=Statess.chatt)
async def menu(message: types.Message):
    if message.from_user.username:
        link = f'https://t.me/{message.from_user.username}'
    else:
        link = ''
    for chat_id in list:
        await bot.delete_message(message.chat.id, message.message_id)
        try:
            await bot.send_message(chat_id, f'[{message.from_user.first_name}]({link}): {message.text}', parse_mode=types.ParseMode.MARKDOWN)
        except Exception as e:
            print(f'Error sending message to chat_id {chat_id}: {e}')


@dp.message_handler(commands='menu')
async def menu(message: types.Message):
    await Statess.menu.set()
    await message.answer('menu', reply_markup=menu_kb())
@dp.message_handler(commands='help')
async def help(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/help'), KeyboardButton('/stats'))
    await bot.send_message(message.chat.id, """/start - ....
/stats - ...""", reply_markup=kb)
    await message.delete()

@dp.message_handler(commands='start')
async def start(message: types.Message):
    # kb.add(help)
    connect = sqlite3.connect('bd')
    c = connect.cursor()
    c.execute(f'SELECT * FROM users WHERE id = {message.chat.id}')
    # c.execute('delete from ctc')
    # c.execute('delete from users')
    # connect.commit()
    fid = c.fetchall()
    print(fid)
    if not fid:
       fid = message.chat.id
       c.execute('INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);', (fid, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100))
       # c.execute('DELETE FROM ctc')
       connect.commit()
    c.execute(f'SELECT * FROM users WHERE id = {message.chat.id}')
    fid = c.fetchall()
    print(fid)
    if fid[0][1]==0:
     #   await Statess.noduh.set()11111111111111111111111111111111111111111111111111111111111111111111111111111
        startt.add(KeyboardButton('–ü—Ä–æ—è–≤–∏—Ç—å —Å–æ–≤–µ–≥–æ –¥—É—Ö–∞‚òÄÔ∏èüåë'))
    await bot.send_message(chat_id=message.chat.id, text="""–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è message.from_user.first_name, —ç—Ç–æ –±–æ—Ç —Å –¥—É—Ö–∞–º–∏ .... –ü–æ —Ç–∏–ø—É —Ç–∞–º–∞–≥–æ—á–∏. 
Faq - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É
–ü—Ä–æ—è–≤–∏—Ç—å —Å–æ–≤–µ–≥–æ –¥—É—Ö–∞ - —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–¥–∞—Ç—å –¥—É—Ö–∞ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç—É) 
–Ω—É –Ω–∞—á–∞–ª–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–æ–µ)""", reply_markup=startt)



@dp.message_handler(Text(equals='–ü—Ä–æ—è–≤–∏—Ç—å —Å–æ–≤–µ–≥–æ –¥—É—Ö–∞‚òÄÔ∏èüåë'), state=Statess.noduh)
async def duh(message: types.Message):
        duh = InlineKeyboardMarkup(row_width=3)
        i1 = InlineKeyboardButton(text='1', callback_data='1')
        i2 = InlineKeyboardButton(text='2', callback_data='2')
        i3 = InlineKeyboardButton(text='3', callback_data='3')
        duh.add(i1)
        await bot.send_message(chat_id=message.chat.id, text='–í—ã –≤–æ—à–ª–∏ –•—Ä–∞–º –≤–µ—á–Ω–æ–≥–æ —Å–∏—è–Ω–∏—è ', reply_markup=startt)
        ran= random.randint(1, 3)
        if ran == 2:
            duh.add(i2)
            await sleep(60)
        elif ran== 3 :
            duh.add(i2, i3)
            await sleep(120)
        await sleep(60)
        await bot.send_message(chat_id=message.chat.id, text=' –¥—É—Ö–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª', reply_markup=duh)



@dp.message_handler(Text(equals='–ú–µ–Ω—é'))
async def menu(message: types.Message):
    await Statess.menu.set()
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu_kb())

@dp.message_handler(Text(equals='–ì–æ—Ä–æ–¥'), state=Statess.menu)#''''''''''''''''''''''''''''''''''''''''''''''''''
async def citi(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'menu_kb()'
    await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –≥–æ—Ä–æ–¥', reply_markup=citi_kb())

@dp.message_handler(Text(equals='–†–µ–π—Ç–∏–Ω–≥'), state=Statess.menu)
async def top(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'citi_kb()'
    connect = sqlite3.connect('bd')
    c = connect.cursor()
    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π ORDER BY –∏ LIMIT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 10 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ "column_name" –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "table_name", –≤–∫–ª—é—á–∞—è —Ç–∞–∫–∂–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã "id"
    c.execute("SELECT id, predel FROM users ORDER BY predel DESC LIMIT 10")
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    top = c.fetchall()
    message_text = '–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n'
    for i, top in enumerate(top, start=1):
        fid, strength = top
        user = await bot.get_chat(fid)
        message_text += f'{i}. {user.first_name}, –°–∏–ª–∞: {strength}\n'
    top_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    top_kb.add(KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer(f'{message_text}', reply_markup=top_kb, parse_mode='HTML')

@dp.message_handler(Text(equals='–ò–≤–µ–Ω—Ç—ã'), state=Statess.menu)
async def ivent(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'citi_kb()'
    ivent_kb=ReplyKeyboardMarkup(resize_keyboard=True)
    ivent_kb.add(KeyboardButton('–ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç'), KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç')).add(KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –≥–æ—Ä–æ–¥', reply_markup=ivent_kb)

@dp.message_handler(Text(equals='–ö—É–∑–Ω—è'), state=Statess.menu)
async def dom(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'citi_kb()'
    dom_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    dom_kb.add(KeyboardButton('–û—Ä—É–∂–∏–µ'), KeyboardButton('–ë—Ä–∞–Ω—è'), KeyboardButton('–°—Ñ–µ—Ä—ã')).add(KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –≥–æ—Ä–æ–¥', reply_markup=dom_kb)


@dp.message_handler(Text(equals='–¢–æ—Ä–≥–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª'), state=Statess.menu)
async def shop(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'citi_kb()'
    shop_kb=ReplyKeyboardMarkup(resize_keyboard=True)
    shop_kb.add(KeyboardButton('–í–µ—Ä–Ω—É—Ç—Å—è')).add(KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –≥–æ—Ä–æ–¥', reply_markup=shop_kb)

@dp.message_handler(Text(equals='–ß–∞—Ç'), state=Statess.menu)
async def chatt(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last'] = 'citi_kb()'
    await Statess.chatt.set()
    global list
    list.append(message.chat.id)
    chatt_kb=ReplyKeyboardMarkup(resize_keyboard=True)
    chatt_kb.add(KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –≥–æ—Ä–æ–¥', reply_markup=chatt_kb)

@dp.message_handler(Text(equals='–†–∞–±–æ—Ç–∞'), state=Statess.menu)
async def dange(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'menu_kb()'
        data['movie'] = '–†–∞–±–æ—Ç–∞'
    await Statess.wait.set()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('1'), KeyboardButton('3'), KeyboardButton('6')).add(KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ', reply_markup=kb)


@dp.message_handler(Text(equals='–î–µ–π—Å—Ç–≤–∏—è'), state=Statess.menu)#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
async def movie(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'menu_kb()'
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π–≤—Ç–∏–µ', reply_markup=movies_kb())

@dp.message_handler(Text(equals='–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'), state=Statess.menu)
async def work(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'movies_kb()'
    work_kb=ReplyKeyboardMarkup(resize_keyboard=True)
    work_kb.add(KeyboardButton('–°–∏–ª–∞'), KeyboardButton('–†–µ–∞–∫—Ü–∏—è'), KeyboardButton('–°–∫–æ—Ä–æ—Å—Ç—å')).add(KeyboardButton('–ù–∞–∑–∞–¥'))
    await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –≥–æ—Ä–æ–¥', reply_markup=work_kb)


@dp.message_handler(lambda message: message.text in ['–°–∏–ª–∞', '–†–µ–∞–∫—Ü–∏—è', '–°–∫–æ—Ä–æ—Å—Ç—å', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–ü–æ–≥–ª–æ—à–µ–Ω–∏–µ –µ–Ω–µ—Ä–≥–∏–∏'], state=Statess.menu)
async def d(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ù–∞–∑–∞–¥'))
    await Statess.wait.set()
    async with state.proxy() as data:
        data['movie'] = message.text
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏(—á–∞—Å–æ–≤)', reply_markup=kb)
    print(Statess)


@dp.message_handler(state=Statess.wait)
async def da(message: types.Message, state: FSMContext):
    print('wait')
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ù–∞–∑–∞–¥'))
    if message.text.isdigit()== True and 0 < int(message.text) < 17:
        connect = sqlite3.connect('bd')
        c = connect.cursor()
    #strength integer, speed integer, reaction integer, energy integer, travel integer)
        async with state.proxy() as data:
            if data['movie']=='–°–∏–ª–∞':
                move='strength'
            if data['movie']=='–†–µ–∞–∫—Ü–∏—è':
                move= 'reaction'
            if data['movie'] == '–°–∫–æ—Ä–æ—Å—Ç—å':
                move = 'speed'
            if data['movie'] == '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ':
                move = 'travel'
            if data['movie'] == '–ü–æ–≥–ª–æ—à–µ–Ω–∏–µ –µ–Ω–µ—Ä–≥–∏–∏':
                move = 'energy'
            if data['movie'] == '–†–∞–±–æ—Ç–∞':
                move = 'money'
                '''await message.answer('—Ç–µ–ø–µ—Ä—å –≤—ã –∑–∞–Ω—è—Ç—ã', reply_markup=kb)
                await Statess.do.set()
                await asyncio.sleep(int(message.text) * 1)
                await Statess.menu.set()
                
                await message.answer(f'–≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {random.randint(5, 10)*int(message.text)}', reply_markup=kb)
                c.execute(f'UPDATE users SET {move} = {move}+{j} WHERE id = {message.chat.id}')
                connect.commit()
                return'''



        await message.answer('—Ç–µ–ø–µ—Ä—å –≤—ã –∑–∞–Ω—è—Ç—ã', reply_markup=kb)
        await Statess.do.set()


        j=0
        for i in range(int(message.text)):
            if str(await state.get_state()) == 'Statess:do':
                await asyncio.sleep(2)
                j=i
            else:
                c.execute(f'UPDATE users SET {move} = {move}+{j} WHERE id = {message.chat.id}')
                connect.commit()
                break
        c.execute(f'UPDATE users SET {move} = {move}+{j} WHERE id = {message.chat.id}')
        connect.commit()
        await message.answer('–≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏', reply_markup=kb)
        await Statess.menu.set()

    else:
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 16', reply_markup=kb)
        await Statess.wait.set()
    async with state.proxy() as data:
        data['last'] = 'movies_kb()'
    print(fid(message.chat.id))



@dp.message_handler(Text(equals='–î—Ä—É–∑—å—è'), state="*")#''''''''''''''''''''''''''''''''''''''''''''
async def friend(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'menu_kb()'
    await message.answer('–í–∞—à–∏ –¥—Ä—É–∑—å—è', reply_markup=friend_kb())

@dp.message_handler(Text(equals='–ü—Ä–æ—Ñ–∏–ª—å'), state="*")#''''''''''''''''''''''''''''''''''''''''
async def profile(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'menu_kb()'
    info=fid(message.chat.id)

    await message.answer(f'''–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ù–∏–∫: –õ—ë—à–∞
ID: {info[0][0]}

‚îå –£—Ä–æ–≤–µ–Ω—å: 11
‚îú –û–ø—ã—Ç: 1105 / 1255
‚îú –£—Ä–æ–≤–µ–Ω—å –¥—É—Ö–∞: 88
‚îî –ï–Ω–µ—Ä–≥–∏—è:67/67

‚îå üë• –î—Ä—É–∑—å—è
‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {info[0][2]}

‚îå üéà –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
‚îî –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {info[0][4]}''')

@dp.message_handler(Text(equals='–ù–∞—Å—Ç—Ä–æ–∏–∫–∏'), state="*")#''''''''''''''''''''''''''''
async def setting(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'menu_kb()'


    await message.answer('–ù–∞—Å—Ç—Ä–æ–∏–∫–∏', reply_markup=setting_kb())




@dp.message_handler(Text(equals='–ü–æ–¥–∑–µ–º–µ–ª—å–µ'), state=Statess.menu)
async def dange(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last']= 'citi_kb()'

    await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ', reply_markup=dange_kb())

@dp.message_handler(state=Statess.do)
async def menu(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å'), KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å'), KeyboardButton('–ß–∞—Ç'), KeyboardButton('–ù–∞—Å—Ç—Ä–æ–∏–∫–∏'))
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb)




@dp.callback_query_handler(lambda c: c.data == '1')
async def cl_start(callback: types.callback_query):
    print(1)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ú–µ–Ω—é'))
    await bot.edit_message_text(text=' harakteristika', chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=None)
    await callback.answer('', reply_markup=kb)



if __name__ == '__main__' :
    executor.start_polling(dp, skip_updates=True)